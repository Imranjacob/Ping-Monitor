//#include <ESP8266WiFi.h>
//#include <ESP8266Ping.h> 
//#include <ESP8266HTTPClient.h>
//#include <ESP8266WebServer.h>
//#include <EEPROM.h>
//#include <WiFiClientSecure.h>
//#include <UniversalTelegramBot.h>
//#include <LiquidCrystal_I2C.h> 
//#include <LiquidCrystal.h>

//#include <ESPAsyncTCP.h>
//#include <ESPAsyncWebServer.h>
//#include <ArduinoJson.h>
#define BOTtoken "912533104:AAE9uldAWfqPzd7HgL7_MQeDpbBoIsDuSms"

LiquidCrystal_I2C lcd(0x27,2,1,0,4,5,6,7,3,POSITIVE);

#define CHAT_ID "481872296"

    const char* http_username = "admin";
    const char* http_password = "admin";
    const char index_html[] PROGMEM= {"<html>\n\n<head>\n    <title>Login Page</title>\n</head>\n\n<body>\n    <form name=\"loginForm\" method=\"post\" action=\"/wifi\">\n        <table width=\"20%\" bgcolor=\"0099CC\" align=\"center\">\n\n            <tr>\n                <td colspan=2>\n                    <center>\n                        <font size=4><b>ESP 8266 LOGIN</b></font>\n                    </center>\n                </td>\n            </tr>\n\n            <tr>\n                <td>Username:</td>\n                <td><input type=\"text\" size=25 name=\"userid\"></td>\n            </tr>\n\n            <tr>\n                <td>Password:</td>\n                <td><input type=\"Password\" size=25 name=\"pwd\"></td>\n            </tr>\n\n            <tr>\n                <td><input type=\"Reset\"></td>\n                <td><input type=\"submit\" onclick=\"return check(this.form)\" value=\"Login\"></td>\n            </tr>\n\n        </table>\n    </form>\n    <script language=\"javascript\">\n        function check(form) {\n\n            if (form.userid.value == \"admin\" && form.pwd.value == \"admin@123\") {\n                \n                  \n                 }\n            else \n            {\n                alert(\"Error Password or Username\")\n                return false;\n            }\n        }\n\n    </script>\n\n</body>\n\n</html>\n"};
WiFiClientSecure client;
UniversalTelegramBot bot(BOTtoken, client);

//Variables
int i = 0;
int statusCode;
const char* ssid = "Default_SSID";
const char* passphrase = "Default_Password";
String st;
String content;


//Function Decalration
bool testWifi(void);
void launchWeb(void);
void setupAP(void);
const IPAddress remote_ip (172,217,31,100);

//Establishing Local server at port 80 whenever required
ESP8266WebServer server(80);

void setup()
{
  client.setInsecure();
ESP.wdtDisable();
ESP.wdtEnable(WDTO_8S);
lcd.begin(16, 2);
Serial.begin(115200); //Initialising if(DEBUG)Serial Monitor
Serial.println();
Serial.println("Disconnecting current wifi connection");
WiFi.disconnect();
EEPROM.begin(512); //Initialasing EEPROM
delay(10);
pinMode(D7, OUTPUT);
pinMode(D5, OUTPUT);
Serial.println();
Serial.println();
Serial.println("Startup");
 lcd.print("Starting UP");
  delay(1000);

//---------------------------------------- Read eeprom for ssid and pass
Serial.println("Reading EEPROM ssid");

String esid;
for (int i = 0; i < 32; ++i)
{
esid += char(EEPROM.read(i));
}
Serial.println();
Serial.print("SSID: ");
Serial.println(esid);
Serial.println("Reading EEPROM pass");
 lcd.clear();
 lcd.print("Reading EEPROM pass");
  delay(1000);
 

String epass = "";
for (int i = 32; i < 96; ++i)
{
epass += char(EEPROM.read(i));
}
Serial.print("PASS: ");
Serial.println(epass);


WiFi.begin(esid.c_str(), epass.c_str());
if (testWifi())
{
Serial.println("Succesfully Connected!!!");
lcd.clear();
   delay(1000);
   lcd.print("Succesfully Connected!!!");

  IPAddress IP = WiFi.localIP();
 Serial.println(IP);         // Send the IP address 
   digitalWrite(D5, HIGH);
   digitalWrite(D7, LOW);
   lcd.clear();
   delay(1000);
   lcd.print("Bot started up");
   delay(1000);
   bot.sendMessage(CHAT_ID, "Bot started up", "");
   delay(1000);
   lcd.clear();
   delay(1000);
   lcd.print("Ping in Progress");
   delay(1000);
 bot.sendMessage(CHAT_ID, "Ping in Progress", "");
return;
}
else
{
Serial.println("Turning the HotSpot On");
lcd.clear();
   delay(1000);
   lcd.print("HotSpot On");
   delay(1000);
launchWeb();
setupAP();// Setup HotSpot
}
lcd.clear();
   delay(1000);
   lcd.clear();
   delay(1000);
   lcd.print("IP: ");
lcd.print(WiFi.softAPIP()); 
//lcd.clear();
   //delay(1000);
  // lcd.print("Waiting..");
  // delay(1000);
Serial.println();
Serial.println("Waiting.");

while ((WiFi.status() != WL_CONNECTED))
{
Serial.print(".");
delay(100);
server.handleClient();
}

}
void loop() {
  ESP.wdtFeed();
if ((WiFi.status() == WL_CONNECTED))
{

if (Ping.ping(remote_ip)) {  //Ping Ipaddress
  lcd.clear();
   delay(1000);
   lcd.print("PINGING");
   delay(1000);
Serial.println("Success!!");
digitalWrite(D7, LOW);
delay (1000);
digitalWrite(D5,LOW);
delay (1000);
digitalWrite(D5, HIGH);
delay (1000);
digitalWrite(D5,LOW);
delay (1000);
digitalWrite(D5,HIGH);


} else {
  lcd.clear();
   delay(1000);
   lcd.print("Error");
   delay(1000);
Serial.println("Error :(");
 digitalWrite(D5, LOW);
 digitalWrite(D7, HIGH);
 delay (1000);
 digitalWrite(D7, LOW);
 delay (1000);
 digitalWrite(D7, HIGH);
 delay(1000);
 digitalWrite(D7, LOW);
 delay (1000);
 bot.sendMessage(CHAT_ID, "PING HAS STOP WORKING PLEASE CHECK THE WEBSITE OR IP TO SEE IF THE SERVER STOPPED WORKING ", "");

}

}

}
//----------------------------------------------- Fuctions used for WiFi credentials saving and connecting to it which you do not need to change 
bool testWifi(void)
{
int c = 0;
lcd.clear();
   delay(1000);
   lcd.print("Waiting for Wifi");
   delay(1000);
Serial.println("Waiting for Wifi to connect");
while ( c < 20 ) {
if (WiFi.status() == WL_CONNECTED)
{
return true;
}
delay(500);
Serial.print("*");
c++;
}
Serial.println("");
lcd.clear();
   delay(1000);
   lcd.print("opening AP");
   delay(1000);
Serial.println("Connect timed out, opening AP");
return false;
}

void launchWeb()
{
Serial.println("");
if (WiFi.status() == WL_CONNECTED)
lcd.clear();
   delay(1000);
   lcd.print("Connected");
   delay(1000);
Serial.println("WiFi connected");
Serial.print("Local IP: ");
Serial.println(WiFi.localIP());
lcd.clear();
   delay(1000);
   lcd.clear();
   delay(1000);
   lcd.print("IP: ");
lcd.print(WiFi.softAPIP()); 
Serial.print("IP: ");
Serial.println(WiFi.softAPIP());
createWebServer();
// Start the server
server.begin();
Serial.println("Server started");

}

void setupAP(void)
{
WiFi.mode(WIFI_STA);
WiFi.disconnect();
delay(100);
int n = WiFi.scanNetworks();
Serial.println("scan done");
if (n == 0)
Serial.println("no networks found");
else
{
Serial.print(n);
Serial.println(" networks found");
for (int i = 0; i < n; ++i)
{
// Print SSID and RSSI for each network found
Serial.print(i + 1);
Serial.print(": ");
Serial.print(WiFi.SSID(i));
Serial.print(" (");
Serial.print(WiFi.RSSI(i));
Serial.print(")");
Serial.println((WiFi.encryptionType(i) == ENC_TYPE_NONE) ? " " : "*");
delay(10);
}
}
Serial.println("");
delay(1);
st = "<ol>";
for (int i = 0; i < n; ++i)
{
// Print SSID and RSSI for each network found
st += "<li>";
st += WiFi.SSID(i);
st += " (";
st += WiFi.RSSI(i);

st += ")";
st += (WiFi.encryptionType(i) == ENC_TYPE_NONE) ? " " : "*";
st += "</li>";
}
st += "</ol>";
delay(100);
WiFi.softAP("ESP8266", "");
Serial.println("Initializing_softap_for_wifi credentials_modification");
launchWeb();
Serial.println("over");
}

void createWebServer()
{
{
server.on("/", []() {
  

IPAddress ip = WiFi.softAPIP();
server.send_P(200, "text/html", index_html);});

server.on("/wifi",[](){
  IPAddress ip = WiFi.softAPIP();
String ipStr = String(ip[0]) + '.' + String(ip[1]) + '.' + String(ip[2]) + '.' + String(ip[3]);
content =
content = "<!DOCTYPE HTML>\r\n<html>Welcome to Wifi Credentials Update page";
content += "<form action=\"/scan\" method=\"POST\"><input type=\"submit\" value=\"scan\"></form>";
content += ipStr;
content += "<p>";
content += st;
content += "</p><form method='get' action='setting'><label>SSID: </label><input name='ssid' length=32><input name='pass' length=64><input type='submit'></form>";
content += "</html>";
server.send(200, "text/html", content);
});
server.on("/scan", []() {
//setupAP();
IPAddress ip = WiFi.softAPIP();
String ipStr = String(ip[0]) + '.' + String(ip[1]) + '.' + String(ip[2]) + '.' + String(ip[3]);

content = "<!DOCTYPE HTML>\r\n<html>go back";
server.send(200, "text/html", content);
});

server.on("/setting", []() {
String qsid = server.arg("ssid");
String qpass = server.arg("pass");
if (qsid.length() > 0 && qpass.length() > 0) {
Serial.println("clearing eeprom");
for (int i = 0; i < 96; ++i) {
EEPROM.write(i, 0);
}
Serial.println(qsid);
Serial.println("");
Serial.println(qpass);
Serial.println("");

Serial.println("writing eeprom ssid:");
for (int i = 0; i < qsid.length(); ++i)
{
EEPROM.write(i, qsid[i]);
Serial.print("Wrote: ");
Serial.println(qsid[i]);
delay(1000);
}
Serial.println("writing eeprom pass:");
for (int i = 0; i < qpass.length(); ++i)
{
  delay(1000);
EEPROM.write(32 + i, qpass[i]);
Serial.print("Wrote: ");
Serial.println(qpass[i]);
}
EEPROM.commit();

content = "{\"Success\":\"saved to eeprom... reset to boot into new wifi\"}";
statusCode = 200;
ESP.reset();
} else {
content = "{\"Error\":\"404 not found\"}";
statusCode = 404;
Serial.println("Sending 404");
}
server.sendHeader("Access-Control-Allow-Origin", "*");
server.send(statusCode, "application/json", content);

});
} 
}
