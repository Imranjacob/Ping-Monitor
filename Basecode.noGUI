import java.net.URL;
import java.io.OutputStream;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.InetAddress;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.List;

public class PingMonitor {

    private static final String TELEGRAM_BOT_TOKEN = "here"; // Replace with your bot token
    private static final String CHAT_ID = "-here"; // Replace with your chat ID
    private static final String IP_FILE_PATH = "here"; //insert path to ip.txt
    private static int lastUpdateId = 0;

    private static List<String> ipAddresses = new ArrayList<>();
    private static List<Boolean> serverStatus = new ArrayList<>();
    private static List<Integer> failureCount = new ArrayList<>();

    public static void main(String[] args) {

        // Load IPs from file
        ipAddresses = loadIPAddressesFromFile(IP_FILE_PATH);
        for (String ip : ipAddresses) {
            serverStatus.add(true);
            failureCount.add(0);
        }

        if (ipAddresses.isEmpty()) {
            sendTelegramMessage(" No IP addresses found in the file.");
            return;
        }

        sendTelegramMessage(" Monitoring system started. Checking " + ipAddresses.size() + " IP(s).");

        while (true) {
            for (int i = 0; i < ipAddresses.size(); i++) {
                String ip = ipAddresses.get(i);
                boolean isReachable = pingServer(ip);

                if (isReachable) {
                    if (!serverStatus.get(i)) {
                        sendTelegramMessage(" Ping Success: " + ip);
                        serverStatus.set(i, true);
                        failureCount.set(i, 0);
                    }
                } else {
                    failureCount.set(i, failureCount.get(i) + 1);

                    if (serverStatus.get(i)) {
                        sendTelegramMessage(" Ping Failure: " + ip);
                        serverStatus.set(i, false);
                    }
                }

                try {
                    Thread.sleep(2000); // Wait 5 sec between each ping
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }

            checkTelegramUpdates();

            try {
                Thread.sleep(3000); // Wait before next round
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    private static List<String> loadIPAddressesFromFile(String filePath) {
        try {
            return Files.readAllLines(Paths.get(filePath));
        } catch (Exception e) {
            e.printStackTrace();
            return List.of();
        }
    }

    private static boolean pingServer(String ipAddress) {
        try {
            InetAddress address = InetAddress.getByName(ipAddress);
            return address.isReachable(1000);
        } catch (Exception e) {
            return false;
        }
    }

    private static void sendTelegramMessage(String message) {
        try {
            String urlString = "https://api.telegram.org/bot" + TELEGRAM_BOT_TOKEN + "/sendMessage";
            URL url = new URL(urlString);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setDoOutput(true);
            String params = "chat_id=" + CHAT_ID + "&text=" + message;

            try (OutputStream os = conn.getOutputStream()) {
                os.write(params.getBytes());
                os.flush();
            }

            conn.getResponseCode();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void checkTelegramUpdates() {
        try {
            String urlString = "https://api.telegram.org/bot" + TELEGRAM_BOT_TOKEN + "/getUpdates?offset=" + (lastUpdateId + 1);
            URL url = new URL(urlString);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");

            try (BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()))) {
                StringBuilder response = new StringBuilder();
                String line;
                while ((line = in.readLine()) != null) {
                    response.append(line);
                }
                processUpdates(response.toString());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void processUpdates(String updates) {
        if (updates.contains("\"update_id\":")) {
            String[] parts = updates.split("\"update_id\":");
            for (int i = 1; i < parts.length; i++) {
                String updateIdStr = parts[i].split(",")[0].trim();
                int updateId = Integer.parseInt(updateIdStr);
                if (updateId > lastUpdateId) {
                    lastUpdateId = updateId;

                    String messageBlock = parts[i];
                    if (!messageBlock.contains("\"chat\":{\"id\":" + CHAT_ID)) {
                        continue; // Reject unknown users
                    }

                    String[] splitText = messageBlock.split("\"text\":\"");
                    if (splitText.length < 2) continue;

                    String messageText = splitText[1].split("\"")[0].trim();

                    if (messageText.equalsIgnoreCase("status")) {
                        sendTelegramMessage(" Ping Monitor is running. Monitoring " + ipAddresses.size() + " IP(s).");
                    } else if (messageText.equalsIgnoreCase("list")) {
                        if (ipAddresses.isEmpty()) {
                            sendTelegramMessage(" No IPs currently monitored.");
                        } else {
                            StringBuilder sb = new StringBuilder(" Monitored IPs:\n");
                            for (String ip : ipAddresses) {
                                sb.append("- ").append(ip).append("\n");
                            }
                            sendTelegramMessage(sb.toString());
                        }
                    } else if (messageText.toLowerCase().startsWith("add ")) {
                        String ipToAdd = messageText.substring(4).trim();
                        if (!ipAddresses.contains(ipToAdd)) {
                            ipAddresses.add(ipToAdd);
                            serverStatus.add(true);
                            failureCount.add(0);
                            try {
                                Files.write(Paths.get(IP_FILE_PATH), (ipToAdd + System.lineSeparator()).getBytes(), StandardOpenOption.APPEND);
                                sendTelegramMessage(" IP added: " + ipToAdd);
                            } catch (Exception e) {
                                sendTelegramMessage(" Failed to save IP: " + ipToAdd);
                            }
                        } else {
                            sendTelegramMessage(" IP already exists: " + ipToAdd);
                        }
                    } else if (messageText.toLowerCase().startsWith("remove ")) {
                        String ipToRemove = messageText.substring(7).trim();
                        int index = ipAddresses.indexOf(ipToRemove);
                        if (index != -1) {
                            ipAddresses.remove(index);
                            serverStatus.remove(index);
                            failureCount.remove(index);
                            try {
                                Files.write(Paths.get(IP_FILE_PATH), ipAddresses, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.WRITE, StandardOpenOption.CREATE);
                                sendTelegramMessage(" IP removed: " + ipToRemove);
                            } catch (Exception e) {
                                sendTelegramMessage(" Failed to update IP file.");
                            }
                        } else {
                            sendTelegramMessage(" IP not found: " + ipToRemove);
                        }
                    } else {
                        sendTelegramMessage(" Unknown command.\nUse:\n- status\n- list\n- add <ip>\n- remove <ip>");
                    }
                }
            }
        }
    }
}
